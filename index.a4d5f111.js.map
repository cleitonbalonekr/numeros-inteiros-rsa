{"mappings":"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","sources":["src/fermat/fatoracao-fermat.ts","src/mdc/mdc.ts","src/aritimetica-modular/potencia-modular.ts","src/rsa/rsa.ts","src/aula10/index.ts","src/euclidiano-estendido/euclidiano-estendido.ts","src/aritimetica-modular/inversa-modular.ts","src/aula11/descriptography.ts","src/index.ts"],"sourcesContent":["/* eslint-disable no-plusplus */\n/* eslint-disable no-unreachable-loop */\n/* eslint-disable consistent-return */\nfunction formatResponse(x: number, y: number) {\n  const a = x - y;\n  const b = x + y;\n  return { a, b };\n}\n\nexport function isPrimo(input: number) {\n  for (let index = 2; index < input; index++) {\n    if (input % index === 0) {\n      return false;\n    }\n  }\n  return input > 1;\n}\n\nexport function fermat(input: number) {\n  // par\n  if (input % 2 === 0) {\n    return {\n      a: 2,\n      b: input / 2\n    };\n  }\n  // quadrado perfeitos\n  const sqrt = Math.sqrt(input);\n  if (Number.isInteger(sqrt)) {\n    return { a: sqrt, b: sqrt };\n  }\n  // primo\n\n  if (isPrimo(input)) {\n    return { a: 1, b: input };\n  }\n\n  let x = Math.floor(Math.sqrt(input));\n  while (1) {\n    if (input === x * x) {\n      return {\n        a: x,\n        b: x\n      };\n    }\n    x += 1;\n    const y = Math.sqrt(x * x - input);\n    if (Number.isInteger(y)) {\n      return formatResponse(x, y);\n    }\n    // input é primo\n    if (x === (input + 1) / 2) {\n      return {\n        a: 1,\n        b: input\n      };\n    }\n  }\n}\n","export function mdc(a: number, b: number): number {\n  if (a < b) {\n    return mdc(b, a);\n  }\n  let resto = b;\n  while (b !== 0) {\n    resto = a % b;\n    a = b;\n    b = resto;\n  }\n  return a;\n}\n","/* eslint-disable no-plusplus */\n// se for menor que a metade pega negativo\n// se for zero todos vão ser zero\n// se for 1 é um novo ciclo\n// busque resulado de menor magnitude\n// 3) escreva um algoritimo para calcular a potenciação x^y módilo n.\n// Aceleração: - quando achar valor 0 e quando achar valor 1\ntype Input = {\n  modulo: number;\n  value: number;\n};\nexport function congruenciaModular({ modulo, value }: Input) {\n  const result = value % modulo;\n  if (Math.abs(result) > modulo / 2) {\n    return result > 0 ? result - modulo : result + modulo;\n  }\n  return result;\n}\ntype PotenciaInput = {\n  modulo: number;\n  base: number;\n  expoente: number;\n};\nexport function potenciaModular({ base, expoente, modulo }: PotenciaInput) {\n  const array = [1];\n  const mod1 = congruenciaModular({\n    modulo,\n    value: base\n  });\n  for (let index = 0; index < expoente; index++) {\n    const newValue = mod1 * array[index];\n    const newMod = congruenciaModular({\n      modulo,\n      value: newValue\n    });\n    array.push(newMod);\n    if (newMod === 0) {\n      return [...array, ...Array(expoente - index - 1).fill(0)];\n    }\n  }\n\n  return array;\n}\n\nexport function potenciaModularPositiveValues({\n  base,\n  expoente,\n  modulo\n}: PotenciaInput) {\n  const array = [1];\n  const mod1 = base % modulo;\n  for (let index = 0; index < expoente; index++) {\n    const newValue = mod1 * array[index];\n    const newMod = newValue % modulo;\n    array.push(newMod);\n    if (newMod === 0) {\n      return [...array, ...Array(expoente - index - 1).fill(0)];\n    }\n  }\n\n  return array;\n}\n\n// console.log('reponse: x = 8 mod22  -> ',congruenciaModular({\n//  modulo:22,\n// value:8\n// }) )\n\n// console.table(\n//   potenciaModular({\n//     base: 10,\n//     expoente: 7,\n//     modulo: 15\n//   })\n// );\n","/* eslint-disable no-plusplus */\n/* eslint-disable guard-for-in */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\nexport const digitToCaracter = (input: number) => input.toString();\nexport const caracterToNumber = (input: string) => Number(input);\n\nconst KEY = 100;\n\nexport const caracterToCode = (input: string) => {\n  const ascii = input.charCodeAt(0);\n  return ascii + KEY;\n};\nexport const codeToCaracter = (input: number) => {\n  const caracter = input - KEY;\n  return String.fromCharCode(caracter);\n};\n\nexport const blocoToCaracter = (input: number[]) => input.map(codeToCaracter);\n\n// console.table({\n//   x: digitToCaracter(5),\n//   inv: caracterToNumber('5'),\n//   code: codeToCaracter(222)\n// });\n\nexport function wordToCode(input: string) {\n  let encrypted = '';\n  for (const char of input) {\n    const code = caracterToCode(char);\n    encrypted = `${encrypted}${code}`;\n  }\n  return encrypted;\n}\n// console.log(wordToCode('CARRO'));\n\nfunction notStartsWithZero(input: string) {\n  for (let index = input.length - 1; index > 0; index--) {\n    if (Number(input[index]) !== 0) {\n      return index;\n    }\n  }\n  return 0;\n}\n\nexport function encryptRSA(message: string, n: number) {\n  let encrypted = '';\n  let newArray = message;\n  for (let key = 0; key < newArray.length + 1; key++) {\n    const actualValue = newArray.substring(0, key);\n    if (Number(actualValue) >= n) {\n      if (Number(newArray[key - 1]) === 0) {\n        const newIndex = notStartsWithZero(actualValue);\n        encrypted = `${encrypted}${newArray.substring(0, newIndex)}-`;\n        newArray = newArray.substring(newIndex, newArray.length + 1);\n      } else {\n        encrypted = `${encrypted}${newArray.substring(0, key - 1)}-`;\n        newArray = newArray.substring(key - 1, newArray.length + 1);\n      }\n      key = 0;\n    }\n  }\n  return encrypted + newArray;\n}\n// console.log(encryptRSA(wordToCode('caldo'), 209));\n","/* eslint-disable no-plusplus */\nimport { fermat } from '../fermat/fatoracao-fermat';\nimport { mdc } from '../mdc/mdc';\nimport { potenciaModularPositiveValues } from '../aritimetica-modular/potencia-modular';\nimport { encryptRSA, wordToCode } from '../rsa/rsa';\n// import { encryptRSA, wordToCode } from '../rsa/rsa';\n\nexport const findNumber = (value: number, array: number[]) =>\n  !!array.find((v) => v === value);\n// console.log('findNumber', findNumber(15, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\nexport function getFI(n: number) {\n  const fatores = fermat(n);\n  const { a, b } = fatores as { a: number; b: number };\n  return (a - 1) * (b - 1);\n}\n// 540 resposta\n// console.log('φ: ', getFI(589));\n\nexport function getE(n: number) {\n  const φ = getFI(n);\n  for (let e = 2; e <= φ; e++) {\n    const possibleE = mdc(e, φ);\n    if (possibleE === 1 && φ % e !== 0) {\n      return e;\n    }\n  }\n  return 0;\n}\n\n// Resposta 7\n// console.log('E: ', getE(589));\n// console.log('E: ', getE(12829));\n\nexport function codeB(b: number, n: number) {\n  const e = getE(n);\n  const resultArray = potenciaModularPositiveValues({\n    base: b,\n    expoente: e,\n    modulo: n\n  });\n  const result = resultArray.pop();\n  return result;\n  // return b ** e % n;\n}\n// console.log('codeB: ', codeB(10, 589));\n\nexport function encryptPublicKey(text: string, n: number) {\n  const encryptedBlocks: number[] = [];\n  const blocos = text.split('-') as unknown as number[];\n  blocos.forEach((bloco) => {\n    const encryptedBlock = codeB(bloco, n);\n    encryptedBlocks.push(encryptedBlock);\n  });\n  return encryptedBlocks;\n}\n// const nValue = 209;\n// const message = encryptRSA(wordToCode('caldo'), nValue);\n\n// console.log('encrypt:', encryptPublicKey(message, nValue));\n\nexport const encrypt = (message: string, n: number) => {\n  const blocosEncrypted = encryptRSA(wordToCode(message), n);\n  const e = getE(n);\n  return {\n    blocosEncrypted,\n    encrypted: encryptPublicKey(blocosEncrypted, n),\n    e\n  };\n};\n","/* eslint-disable no-plusplus */\n/**\n *  Algoritmo euclidiano sxtendido\n *\n * entrada A e B\n *  Quero achar (ALFA) e (BETA)\n *\n *  r = a x + b y\n *\n *  a = ax-1 + by-1\n *  b = ax0 + by0\n *\n * até encontrar o resto 0\n *\n * rn = 0, verificar linha anterior: resto = MDC x = ALFA y = BETA\n *\n * a não pode ser divivel por b (o sistema deve retornar 10 , 1 , -1), de tal forma q nem alfa e beta sejam 0\n *\n * como seria o resultado se b fosse divisel por a\n */\n\nimport { mdc as mdcCalc } from '../mdc/mdc';\n\nexport const calculaEuclidianoEstendido = (a: number, b: number) => {\n  const matriz = [\n    [a, '*', 1, 0],\n    [b, '*', 0, 1]\n  ];\n\n  let i = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    const r = (matriz[i][0] as number) % (matriz[i + 1][0] as number);\n    const q = Math.floor(\n      (matriz[i][0] as number) / (matriz[i + 1][0] as number)\n    );\n    let x = (matriz[i][2] as number) - q * (matriz[i + 1][2] as number);\n    const y = (matriz[i][3] as number) - q * (matriz[i + 1][3] as number);\n\n    if (a % b === 0) {\n      x = 1;\n      const mdc = mdcCalc(a, b);\n      const y2 = -(x * a - mdc) / b;\n\n      matriz.push([mdc, q, x, y2]);\n      break;\n    } else {\n      i++;\n      matriz.push([r, q, x, y]);\n    }\n\n    if (r === 0) break;\n  }\n\n  // console.log(matriz)\n\n  const resultado =\n    a % b\n      ? [\n          matriz[matriz.length - 2][0],\n          matriz[matriz.length - 2][2],\n          matriz[matriz.length - 2][3]\n        ]\n      : [\n          matriz[matriz.length - 2][0],\n          matriz[matriz.length - 1][2],\n          matriz[matriz.length - 1][3]\n        ];\n\n  return {\n    mdc: resultado[0] as number,\n    a: resultado[1] as number,\n    b: resultado[2] as number\n  };\n};\n\n// calculaEuclidianoEstendido(14, 35);\n// calculaEuclidianoEstendido(252, 180);\n// calculaEuclidianoEstendido(6643, 2873);\n// calculaEuclidianoEstendido(50, 10);\n","/* eslint-disable no-plusplus */\nimport { calculaEuclidianoEstendido } from '../euclidiano-estendido/euclidiano-estendido';\n\ntype Input = {\n  beta: number;\n  n: number;\n};\n\nexport function inversaModular({ beta, n }: Input) {\n  const { mdc, b } = calculaEuclidianoEstendido(n, beta);\n  if (mdc === 1) {\n    let response = b;\n    while (response < 0) {\n      response += n;\n    }\n    return response;\n  }\n  return 0;\n}\n// console.log('Respose a): ', inversaModular({\n// b:4,\n//  n:4\n// }) )\n// 3x + 2 = 0  3x = -2 x = -2/3\n// console.log('Respose b): ', inversaModular({\n//   b:3,\n//   n:4\n// }) )\n\n// 2x -1 = 7 2x = 8 x =  8/2 => x = 8 * |2|\n// console.log(\n//   'Respose 1 - c): ',\n//   inversaModular({\n//     beta: 2,\n//     n: 15\n//   })\n// );\n\n// console.log('Exercicio 2. A):');\n// console.table(getList(4))\n\n// console.log('Exercicio 2. B):');\n// console.table(getList(11))\n\n// console.log('Exercicio 2. C):');\n// console.table(getList(15))\n// console.log('euclidiano estedido',euclidianoEstendido(2, 15));\n\n// const n = 7;\n// export function listOfInversaModular(n: number) {\n//   const array = [];\n//   for (let index = 1; index < n; index++) {\n//     const element = inversaModular({\n//       beta: index,\n//       n\n//     });\n//     array.push({\n//       i: index,\n//       b: element\n//     });\n//   }\n//   return array;\n// }\n// console.table(listOfInversaModular(7));\n","import { inversaModular } from '../aritimetica-modular/inversa-modular';\nimport { potenciaModularPositiveValues } from '../aritimetica-modular/potencia-modular';\nimport { getFI } from '../aula10';\nimport { blocoToCaracter } from '../rsa/rsa';\n\nexport function getPrivateKey(e: number, n: number) {\n  const φ = getFI(n);\n  const result = inversaModular({\n    beta: e,\n    n: φ\n  });\n  return result;\n}\n\nexport function decodeB(bloco: number, n: number, d: number) {\n  const resultArray = potenciaModularPositiveValues({\n    base: bloco,\n    expoente: d,\n    modulo: n\n  });\n  const result = resultArray.pop();\n  return result;\n}\n\nexport function decryptPublicKey(blocos: number[], n: number, d: number) {\n  const encryptedBlocks: number[] = [];\n  blocos.forEach((bloco) => {\n    const encryptedBlock = decodeB(bloco, n, d);\n    encryptedBlocks.push(encryptedBlock);\n  });\n  return encryptedBlocks;\n}\n\nexport const decryptRSA = (blocos: number[], n: number, d: number) => {\n  const decrypted = decryptPublicKey(blocos, n, d);\n  const group = decrypted.join('').match(/.{1,3}/g) as unknown as number[];\n\n  return {\n    decrypted,\n    decryptedMessage: blocoToCaracter(group)\n  };\n};\n\n// const nValue = 209;\n// const encryptedResponse = encrypt('caldo', nValue);\n// console.log('encryptedResponse', encryptedResponse);\n// const privateKey = getPrivateKey(encryptedResponse.e, nValue);\n// console.log(decryptRSA(encryptedResponse.encrypted, nValue, privateKey));\n// console.log(\n//   decryptRSA([4746, 8214, 9372, 9009, 8198], 10403, getPrivateKey(8743, 10403))\n// );\n","/* eslint-disable no-alert */\n/* eslint-disable consistent-return */\nimport { encrypt } from './aula10';\nimport { decryptRSA, getPrivateKey } from './aula11/descriptography';\n\nexport function ecryptFile(data: string, n: number) {\n  const encryptResponse = encrypt(data, n);\n  return {\n    e: encryptResponse.e,\n    encrypted: encryptResponse.encrypted.join('-')\n  };\n}\nexport function decryptFile(n: number, e: number, dataEncrypted: string) {\n  const decryptedResponse = decryptRSA(\n    dataEncrypted.split('-') as unknown as number[],\n    n,\n    getPrivateKey(e, n)\n  );\n  return {\n    decrypted: decryptedResponse.decryptedMessage.join('')\n  };\n}\n\nasync function writeFile(fileHandle: any, contents: string) {\n  // Create a FileSystemWritableFileStream to write to.\n  const writable = await fileHandle.createWritable();\n  // Write the contents of the file to the stream.\n  await writable.write(contents);\n  // Close the file and write the contents to disk.\n  await writable.close();\n}\nasync function getNewFileHandle(suggestedName?: string) {\n  const options = {\n    suggestedName,\n    types: [\n      {\n        description: 'Text Files',\n        accept: {\n          'text/plain': ['.txt']\n        }\n      }\n    ]\n  };\n  const handle = await (window as any).showSaveFilePicker(options);\n  return handle;\n}\n\nconst encryptButton = document.getElementById('encrypt') as HTMLElement;\nconst decryptButton = document.getElementById('decrypt') as HTMLElement;\n\nconst getN = () =>\n  Number((document.getElementById('n-value') as HTMLInputElement).value);\nconst getEFromInput = () =>\n  Number((document.getElementById('e-value') as HTMLInputElement).value);\n\nconst throwNError = (key: string) => alert(`Selecione o valor${key}`);\n\nencryptButton.onclick = async () => {\n  const n = getN();\n  if (!n) return throwNError('N');\n  const [fileHandle] = await (window as any).showOpenFilePicker();\n  const file = await fileHandle.getFile();\n  const contents = await file.text();\n  const { encrypted, e } = ecryptFile(contents, n);\n  const writeFileHandle = await getNewFileHandle('encrypted.txt');\n  writeFile(writeFileHandle, encrypted);\n  alert(`Anote o E: ${e}\\n ele é necessário para descriptografar`);\n};\ndecryptButton.onclick = async () => {\n  const n = getN();\n  const e = getEFromInput();\n  if (!n) return throwNError('N');\n  if (!e) return throwNError('E');\n  const [fileHandle] = await (window as any).showOpenFilePicker();\n  const file = await fileHandle.getFile();\n  const contents = await file.text();\n  const { decrypted } = decryptFile(n, e, contents);\n  const writeFileHandle = await getNewFileHandle('dcrypted.txt');\n  writeFile(writeFileHandle, decrypted);\n};\n"],"names":["$376dd78ae862110e$var$formatResponse","x","y","$376dd78ae862110e$export$5fbae386c10288b9","input","a","b","sqrt","Math","Number","isInteger","index","$376dd78ae862110e$export$f22a3c0e9a796617","floor","$1281074e5117fa9c$export$a9ab9b19f5cdb47","resto","$27369f0afa3ce063$export$a321b4bc892881c","base","expoente","modulo","array","mod1","newMod","push","Array","fill","$3e46f283c1efc7a7$export$20fd93b9f5c4157a","charCodeAt","$3e46f283c1efc7a7$export$51a9ef26ea5dae34","caracter","String","fromCharCode","$3e46f283c1efc7a7$export$943daf750193458","encrypted","char","$3e46f283c1efc7a7$var$notStartsWithZero","length","$3e46f283c1efc7a7$export$e64eb36957bf3131","message","n","newArray","key","actualValue","substring","newIndex","$ffb3ba0ab7371639$export$5c069b9ae8102966","fatores","$ffb3ba0ab7371639$export$f4f6809ce68c116b","e","$ffb3ba0ab7371639$export$ce4352a4add5e1e2","text","encryptedBlocks","split","forEach","bloco","encryptedBlock","pop","$ffb3ba0ab7371639$export$89b4a484e28f334b","$ffb3ba0ab7371639$export$5b0f6292f11d1d18","blocosEncrypted","$87157ad5ef47974d$export$6ec4aa731958187c","matriz","i","r","q","mdc","y2","resultado","$fb9ab28272a8d2d1$export$e1dfa3d24166b32e","beta","response","$39d70d34b6ecd9c2$export$8debfa1c82ab7083","$39d70d34b6ecd9c2$export$6b3c982aaac0f3de","blocos","d","$39d70d34b6ecd9c2$export$eea9f8097b3fe7da","$39d70d34b6ecd9c2$export$bb7f598464b2cbe0","decrypted","group","join","match","decryptedMessage","map","$b4e14b6b8da86996$export$69a8607f102086ed","dataEncrypted","async","$b4e14b6b8da86996$var$writeFile","fileHandle","contents","writable","createWritable","write","close","$b4e14b6b8da86996$var$getNewFileHandle","suggestedName","options","types","description","accept","window","showSaveFilePicker","$b4e14b6b8da86996$var$encryptButton","document","getElementById","$b4e14b6b8da86996$var$decryptButton","$b4e14b6b8da86996$var$getN","value","$b4e14b6b8da86996$var$throwNError","alert","onclick","showOpenFilePicker","file","getFile","data","encryptResponse","$b4e14b6b8da86996$export$995ae119dec7375b"],"version":3,"file":"index.a4d5f111.js.map"}